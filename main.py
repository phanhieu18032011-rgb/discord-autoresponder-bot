import discord
from discord import app_commands
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import base64
import os
import asyncio
import json
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
import requests
import random

# Flask app for keep alive
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Bot is alive and running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()

# Kh·ªüi ƒë·ªông Flask server
keep_alive()

# L·∫•y token t·ª´ environment variable
TOKEN = os.environ.get('TOKEN')

if not TOKEN:
    print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y TOKEN!")
    exit(1)

# C·∫•u h√¨nh Discord
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# L∆∞u tr·ªØ session
encryption_sessions = {}

# Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i bot
bot_start_time = datetime.now()

class AESEncryption:
    @staticmethod
    def generate_key_from_password(password: str, salt: bytes = None) -> tuple:
        """T·∫°o kh√≥a t·ª´ m·∫≠t kh·∫©u s·ª≠ d·ª•ng PBKDF2"""
        if salt is None:
            salt = os.urandom(16)
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key, salt

    @staticmethod
    def encrypt_aes_gcm(data: bytes, password: str) -> dict:
        """M√£ h√≥a AES-256-GCM"""
        salt = os.urandom(16)
        key, salt = AESEncryption.generate_key_from_password(password, salt)
        iv = os.urandom(12)
        
        cipher = Cipher(algorithms.AES(key), modes.GCM(iv))
        encryptor = cipher.encryptor()
        ciphertext = encryptor.update(data) + encryptor.finalize()
        
        return {
            'ciphertext': base64.urlsafe_b64encode(ciphertext).decode(),
            'iv': base64.urlsafe_b64encode(iv).decode(),
            'salt': base64.urlsafe_b64encode(salt).decode(),
            'tag': base64.urlsafe_b64encode(encryptor.tag).decode()
        }

# H√†m ping ƒë·ªÉ gi·ªØ bot alive
async def ping_server():
    while True:
        try:
            # T·ª± ping ch√≠nh n√≥ ƒë·ªÉ gi·ªØ active
            requests.get('https://your-bot-name.onrender.com', timeout=5)
            print(f"üîÑ Keep-alive ping at {datetime.now().strftime('%H:%M:%S')}")
        except:
            print("‚ö†Ô∏è  Kh√¥ng th·ªÉ ping server")
        await asyncio.sleep(300)  # Ping m·ªói 5 ph√∫t

@client.event
async def on_ready():
    print(f'‚úÖ Bot {client.user} ƒë√£ s·∫µn s√†ng!')
    print(f'üìä ƒêang ch·∫°y tr√™n {len(client.guilds)} server(s)')
    print(f'‚è∞ Bot kh·ªüi ƒë·ªông l√∫c: {bot_start_time}')
    
    await tree.sync()
    await client.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name="/mahoa | !mahoa"))
    
    # B·∫Øt ƒë·∫ßu task keep-alive
    client.loop.create_task(ping_server())

# Slash Command /mahoa
@tree.command(name="mahoa", description="M√£ h√≥a source code v·ªõi AES-256-GCM")
async def mahoa_slash(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    encryption_sessions[user_id] = {
        'step': 'waiting_source',
        'created_at': datetime.now(),
        'type': 'slash'
    }
    
    embed = discord.Embed(
        title="üîê **M√É H√ìA SOURCE CODE**",
        description="**Vui l√≤ng g·ª≠i source code c·ªßa b·∫°n ƒë·ªÉ ti·∫øn h√†nh m√£ h√≥a**",
        color=0x5865F2,
        timestamp=datetime.now()
    )
    embed.add_field(
        name="üì§ C√°ch g·ª≠i:",
        value="‚Ä¢ G·ª≠i code tr·ª±c ti·∫øp trong tin nh·∫Øn\n‚Ä¢ Ho·∫∑c attach file (.txt, .py, .js, .java, .cpp, v.v.)",
        inline=False
    )
    embed.add_field(
        name="üîí Thu·∫≠t to√°n:",
        value="AES-256-GCM v·ªõi PBKDF2",
        inline=True
    )
    embed.add_field(
        name="‚è±Ô∏è Th·ªùi h·∫°n:",
        value="5 ph√∫t",
        inline=True
    )
    embed.set_footer(text="H·ªá th·ªëng m√£ h√≥a b·∫£o m·∫≠t cao")
    
    await interaction.response.send_message(embed=embed)

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    # Prefix Command !mahoa
    if message.content.startswith('!mahoa'):
        user_id = message.author.id
        
        encryption_sessions[user_id] = {
            'step': 'waiting_source',
            'created_at': datetime.now(),
            'type': 'prefix'
        }
        
        embed = discord.Embed(
            title="üîê **M√É H√ìA SOURCE CODE**",
            description="**Vui l√≤ng g·ª≠i source code c·ªßa b·∫°n ƒë·ªÉ ti·∫øn h√†nh m√£ h√≥a**",
            color=0x5865F2,
            timestamp=datetime.now()
        )
        embed.add_field(
            name="üì§ C√°ch g·ª≠i:",
            value="‚Ä¢ G·ª≠i code tr·ª±c ti·∫øp trong tin nh·∫Øn\n‚Ä¢ Ho·∫∑c attach file (.txt, .py, .js, .java, .cpp, v.v.)",
            inline=False
        )
        embed.add_field(
            name="üîí Thu·∫≠t to√°n:",
            value="AES-256-GCM v·ªõi PBKDF2",
            inline=True
        )
        embed.add_field(
            name="‚è±Ô∏è Th·ªùi h·∫°n:",
            value="5 ph√∫t",
            inline=True
        )
        embed.set_footer(text="H·ªá th·ªëng m√£ h√≥a b·∫£o m·∫≠t cao")
        
        await message.reply(embed=embed)

    # X·ª≠ l√Ω source code t·ª´ ng∆∞·ªùi d√πng
    elif message.author.id in encryption_sessions:
        user_id = message.author.id
        session = encryption_sessions[user_id]
        
        # Ki·ªÉm tra timeout
        if datetime.now() - session['created_at'] > timedelta(minutes=5):
            del encryption_sessions[user_id]
            await message.reply("‚ùå **Session ƒë√£ h·∫øt h·∫°n!** Vui l√≤ng s·ª≠ d·ª•ng l·ªánh l·∫°i.")
            return

        if session['step'] == 'waiting_source':
            try:
                # L·∫•y source code
                source_content = ""
                file_used = False
                
                if message.attachments:
                    for attachment in message.attachments:
                        valid_extensions = ['.txt', '.py', '.js', '.java', '.cpp', '.c', '.html', '.css', '.php', '.md', '.json', '.xml']
                        if any(attachment.filename.endswith(ext) for ext in valid_extensions):
                            file_content = await attachment.read()
                            source_content = file_content.decode('utf-8')
                            file_used = True
                            break
                    else:
                        await message.reply("‚ùå **Kh√¥ng t√¨m th·∫•y file vƒÉn b·∫£n h·ª£p l·ªá!**")
                        return
                else:
                    source_content = message.content

                if not source_content.strip():
                    await message.reply("‚ùå **Source code kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!**")
                    return

                # L∆∞u source v√† chuy·ªÉn sang b∆∞·ªõc m·∫≠t kh·∫©u
                session['source_content'] = source_content
                session['step'] = 'waiting_password'
                session['file_used'] = file_used
                
                embed = discord.Embed(
                    title="üîë **THI·∫æT L·∫¨P M·∫¨T KH·∫®U**",
                    description="Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m√£ h√≥a:",
                    color=0xF1C40F
                )
                embed.add_field(
                    name="üí° Y√™u c·∫ßu:",
                    value="‚Ä¢ M·∫≠t kh·∫©u m·∫°nh (t·ªëi thi·ªÉu 4 k√Ω t·ª±)\n‚Ä¢ **L∆ØU √ù:** Kh√¥ng th·ªÉ kh√¥i ph·ª•c n·∫øu qu√™n m·∫≠t kh·∫©u!",
                    inline=False
                )
                embed.add_field(
                    name="üìä K√≠ch th∆∞·ªõc source:",
                    value=f"{len(source_content):,} k√Ω t·ª±",
                    inline=True
                )
                embed.add_field(
                    name="üìÅ Lo·∫°i:",
                    value="File" if file_used else "Text",
                    inline=True
                )
                
                await message.reply(embed=embed)
                
            except Exception as e:
                await message.reply(f"‚ùå **L·ªói x·ª≠ l√Ω:** {str(e)}")
                if user_id in encryption_sessions:
                    del encryption_sessions[user_id]

        elif session['step'] == 'waiting_password':
            password = message.content.strip()
            
            if len(password) < 4:
                await message.reply("‚ùå **M·∫≠t kh·∫©u qu√° ng·∫Øn!** T·ªëi thi·ªÉu 4 k√Ω t·ª±.")
                return
            
            # Th√¥ng b√°o ƒëang m√£ h√≥a
            processing_msg = await message.reply("üõ°Ô∏è **ƒêang m√£ h√≥a source code v·ªõi AES-256-GCM...**")
            
            try:
                # M√£ h√≥a source code
                source_bytes = session['source_content'].encode('utf-8')
                encrypted_data = AESEncryption.encrypt_aes_gcm(source_bytes, password)
                
                # T·∫°o file k·∫øt qu·∫£
                result_data = {
                    'encryption_info': {
                        'algorithm': 'AES-256-GCM',
                        'key_derivation': 'PBKDF2-SHA256-100000',
                        'created_at': datetime.now().isoformat(),
                        'data_size': len(source_bytes),
                        'original_type': 'file' if session['file_used'] else 'text'
                    },
                    'encrypted_data': encrypted_data
                }
                
                result_json = json.dumps(result_data, indent=2)
                
                # T·∫°o filename v·ªõi timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                encrypted_file = discord.File(
                    fp=discord.BytesIO(result_json.encode('utf-8')),
                    filename=f"encrypted_source_{timestamp}.secure"
                )
                
                # Embed k·∫øt qu·∫£
                embed = discord.Embed(
                    title="‚úÖ **M√É H√ìA TH√ÄNH C√îNG**",
                    description="Source code c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫£o m·∫≠t!",
                    color=0x2ECC71,
                    timestamp=datetime.now()
                )
                embed.add_field(
                    name="üîê Thu·∫≠t to√°n",
                    value="AES-256-GCM",
                    inline=True
                )
                embed.add_field(
                    name="üìä K√≠ch th∆∞·ªõc g·ªëc",
                    value=f"{len(source_bytes):,} bytes",
                    inline=True
                )
                embed.add_field(
                    name="üîë B·∫£o m·∫≠t",
                    value="PBKDF2 100,000 iterations",
                    inline=True
                )
                embed.add_field(
                    name="üíæ File output",
                    value=f"encrypted_source_{timestamp}.secure",
                    inline=False
                )
                embed.add_field(
                    name="üìù L∆∞u √Ω quan tr·ªçng",
                    value="‚Ä¢ **L∆ØU L·∫†I M·∫¨T KH·∫®U** ƒë·ªÉ gi·∫£i m√£ sau n√†y\n‚Ä¢ Kh√¥ng th·ªÉ kh√¥i ph·ª•c n·∫øu m·∫•t m·∫≠t kh·∫©u\n‚Ä¢ File ch·ª©a d·ªØ li·ªáu m√£ h√≥a an to√†n",
                    inline=False
                )
                embed.set_footer(text="H·ªá th·ªëng m√£ h√≥a AES-256-GCM")
                
                # G·ª≠i k·∫øt qu·∫£
                try:
                    await message.author.send(
                        content=f"üîê **Source code ƒë√£ ƒë∆∞·ª£c m√£ h√≥a th√†nh c√¥ng!**\n**M·∫≠t kh·∫©u b·∫°n d√πng:** ||{password}||\n\n*L∆∞u √Ω: Gi·ªØ k√≠n m·∫≠t kh·∫©u n√†y ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu*",
                        embed=embed,
                        file=encrypted_file
                    )
                    await processing_msg.edit(content="‚úÖ **M√£ h√≥a ho√†n t·∫•t! Source code ƒë√£ m√£ h√≥a ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn tin nh·∫Øn ri√™ng c·ªßa b·∫°n.**")
                except discord.Forbidden:
                    await processing_msg.edit(content="‚ùå **Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng!** Vui l√≤ng b·∫≠t DM v·ªõi bot v√† th·ª≠ l·∫°i.")
                
            except Exception as e:
                await processing_msg.edit(content=f"‚ùå **L·ªói m√£ h√≥a:** {str(e)}")
            
            finally:
                # D·ªçn d·∫πp session
                if user_id in encryption_sessions:
                    del encryption_sessions[user_id]

    # L·ªánh h·ªßy
    elif message.content.startswith('!huy'):
        user_id = message.author.id
        if user_id in encryption_sessions:
            del encryption_sessions[user_id]
            await message.reply("‚ùå **ƒê√£ h·ªßy session m√£ h√≥a hi·ªán t·∫°i.**")

    # L·ªánh ki·ªÉm tra tr·∫°ng th√°i bot
    elif message.content.startswith('!status'):
        uptime = datetime.now() - bot_start_time
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        embed = discord.Embed(
            title="ü§ñ **TR·∫†NG TH√ÅI BOT**",
            color=0x7289DA,
            timestamp=datetime.now()
        )
        embed.add_field(
            name="üü¢ Tr·∫°ng th√°i",
            value="Online ‚úÖ",
            inline=True
        )
        embed.add_field(
            name="‚è∞ Uptime",
            value=f"{hours}h {minutes}m {seconds}s",
            inline=True
        )
        embed.add_field(
            name="üìä Servers",
            value=f"{len(client.guilds)} server(s)",
            inline=True
        )
        embed.add_field(
            name="üõ†Ô∏è T√≠nh nƒÉng",
            value="M√£ h√≥a AES-256-GCM",
            inline=True
        )
        embed.add_field(
            name="üîó Hosting",
            value="Render + Keep Alive",
            inline=True
        )
        embed.set_footer(text=f"Bot ID: {client.user.id}")
        
        await message.reply(embed=embed)

# X·ª≠ l√Ω l·ªói
@tree.error
async def on_app_command_error(interaction: discord.Interaction, error):
    print(f"L·ªói slash command: {error}")
    if isinstance(error, app_commands.CommandNotFound):
        return
    
    try:
        await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh!", ephemeral=True)
    except:
        pass

# Ch·∫°y bot
if __name__ == "__main__":
    try:
        print("üöÄ ƒêang kh·ªüi ƒë·ªông bot m√£ h√≥a v·ªõi Keep Alive...")
        print("üì° Flask server ƒëang ch·∫°y tr√™n port 8080")
        client.run(TOKEN)
    except discord.LoginFailure:
        print("‚ùå Token kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra DISCORD_BOT_TOKEN.")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông: {e}")
